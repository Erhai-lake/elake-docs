import{_ as i,c as o,a6 as a,o as t}from"./chunks/framework.CJ2cRAkn.js";const u=JSON.parse('{"title":"远程仓库","description":"","frontmatter":{},"headers":[],"relativePath":"Docs/Knowledge/ProgrammingLanguage/Git/RemoteStore.md","filePath":"Docs/Knowledge/ProgrammingLanguage/Git/RemoteStore.md","lastUpdated":1727457588000}'),l={name:"Docs/Knowledge/ProgrammingLanguage/Git/RemoteStore.md"};function r(d,e,c,s,p,h){return t(),o("div",null,e[0]||(e[0]=[a('<h1 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h1><p>前面我们已经知道了 Git 中存在两种类型的仓库,即本地仓库和远程仓库</p><p>远程仓库我们可以借助一些代码托管平台来实现,毕竟常用的有 GitHub Gitee(码云) GitLab等</p><ul><li>GitHub <ul><li><code>//github.com</code></li><li>一个面向开源及私有软件项目的托管平台,只支持 Git 作为唯一的版本库格式进行托管</li></ul></li><li>Gitee(码云) <ul><li><code>//gitee.com</code></li><li>是国内的一个代码托管平台,由于服务器在国内,所以相比 GitHub ,Gitee(码云)速度更快</li></ul></li><li>GitLab <ul><li><code>//about.gitlab.com</code></li><li>一个用于仓库管理系统的开源项目,使用 Git 作为代码管理工具,并在此基础上搭建起来的 web 服务,一般用于在企业,学校等内部网络搭建git私服</li></ul></li></ul><p>GitHub和Gitee(码云)都是把代码放在别人的代码托管平台,而GitLab是自部署的,把代码放在自己服务器</p><h2 id="配置ssh秘钥" tabindex="-1">配置SSH秘钥 <a class="header-anchor" href="#配置ssh秘钥" aria-label="Permalink to &quot;配置SSH秘钥&quot;">​</a></h2><p>相当于身份验证</p><ol><li>生成SSH公钥 <ol><li><code>ssh-keygen -t rsa</code></li><li>一直回车,如果以存在,会覆盖掉</li><li>生成的公钥会放在当前用户目录下的<code>.ssh</code>文件夹,如:</li><li><code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code></li></ol></li><li>在代码托管平台绑定SSH秘钥</li><li>验证是否配置成功 <ol><li>GitHub:<code>ssh -T git@github.com</code></li><li>Gitee:<code>ssh -T git@gitee.com</code></li><li>如果需要确认,就输入yes</li><li>返回<code>Hi xxx! You&#39;ve successfully...</code>就说明成功了</li></ol></li></ol><h2 id="本地仓库绑定远程仓库" tabindex="-1">本地仓库绑定远程仓库 <a class="header-anchor" href="#本地仓库绑定远程仓库" aria-label="Permalink to &quot;本地仓库绑定远程仓库&quot;">​</a></h2><p><code>git remote add 名字 远程仓库地址</code></p><p><code>git remote add origin 远程仓库地址</code></p><p>远程仓库地址推荐使用SSH的</p><h2 id="查看本地仓库已绑定的远程仓库" tabindex="-1">查看本地仓库已绑定的远程仓库 <a class="header-anchor" href="#查看本地仓库已绑定的远程仓库" aria-label="Permalink to &quot;查看本地仓库已绑定的远程仓库&quot;">​</a></h2><p><code>git remote</code></p><h2 id="将本地仓库同步到远程仓库" tabindex="-1">将本地仓库同步到远程仓库 <a class="header-anchor" href="#将本地仓库同步到远程仓库" aria-label="Permalink to &quot;将本地仓库同步到远程仓库&quot;">​</a></h2><p><code>git push [-f] 远程仓库名|origin 本地分支名|master:远端分支名|master</code></p><p><code>git push origin master:master</code></p><p>如果本地分支名和远端分支名是一样的,可以省略</p><p><code>git push origin master</code></p><p>-f参数是强制覆盖</p><h2 id="克隆仓库" tabindex="-1">克隆仓库 <a class="header-anchor" href="#克隆仓库" aria-label="Permalink to &quot;克隆仓库&quot;">​</a></h2><p><code>git clone 远程仓库地址 本地目录名</code></p><p>如果不写本地目录名,则使用仓库名</p><h2 id="抓取" tabindex="-1">抓取 <a class="header-anchor" href="#抓取" aria-label="Permalink to &quot;抓取&quot;">​</a></h2><p>将仓库里的更新抓取到本地,不进行合并</p><p><code>git fetch 远端仓库名 分支名</code></p><p><code>git fetch</code></p><p>远端仓库名和分支名不指定,则抓取全部分支</p><h2 id="拉取" tabindex="-1">拉取 <a class="header-anchor" href="#拉取" aria-label="Permalink to &quot;拉取&quot;">​</a></h2><p>将仓库里的更新抓取到本地,自动合并,等同于 fetch+merge</p><p><code>git pull 远端仓库名 分支名</code></p><p><code>git pull</code></p><p>远端仓库名和分支名不指定,则抓取全部分支</p>',33)]))}const m=i(l,[["render",r]]);export{u as __pageData,m as default};
